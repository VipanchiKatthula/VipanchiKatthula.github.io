<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vipanchi Reddy</title>
    <link>https://vipanchikatthula.github.io/</link>
      <atom:link href="https://vipanchikatthula.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Vipanchi Reddy</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 08 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Vipanchi Reddy</title>
      <link>https://vipanchikatthula.github.io/</link>
    </image>
    
    <item>
      <title>Document Similarity using POS Tags</title>
      <link>https://vipanchikatthula.github.io/project/document-similarity-with-postags/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://vipanchikatthula.github.io/project/document-similarity-with-postags/</guid>
      <description>&lt;p&gt;Finding Similarity between documents using Jaccard Similarity and including POS Tags of the words in the model to better find the synchronous relationship between documents.&lt;/p&gt;
&lt;p&gt;Add anything you want here&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>400K Tweet analysis on PySpark</title>
      <link>https://vipanchikatthula.github.io/project/pyspark-operations-on-amazons-tweets/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://vipanchikatthula.github.io/project/pyspark-operations-on-amazons-tweets/</guid>
      <description>&lt;h1 id=&#34;pyspark-operations-on-amazon-tweets&#34;&gt;PySpark Operations On Amazon Tweets&lt;/h1&gt;
&lt;p&gt;This repository shows the implementation of Spark context, Spark SQL context on Amazon Tweets data set with 400k Tweets. I dealt with tweet_id (id_str), Tweet_created_time, Retweet_count, Favourite_count to find the days with high influx of tweets.&lt;br&gt;
Analyzed the tweets on the busiest day to find the words that were repeated the most in the selected tweets.&lt;/p&gt;
&lt;p&gt;Summary of operations:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Import csv file:&lt;/strong&gt;&lt;br&gt;
data = spark.read.format(&amp;ldquo;csv&amp;rdquo;).option(&amp;ldquo;header&amp;rdquo;,&amp;ldquo;true&amp;rdquo;).load(&amp;ldquo;filepath/filename.csv&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Selecting the required columns from a data frame:&lt;/strong&gt;&lt;br&gt;
data.select(&amp;ldquo;column_name1&amp;rdquo;,&amp;lsquo;colname2&amp;rsquo;,&amp;lsquo;colname3&amp;rsquo;,&amp;lsquo;colname4&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Printing data types of columns:&lt;/strong&gt;&lt;br&gt;
types = [f.dataType for f in data1.schema.fields]&lt;br&gt;
types&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Printing distinct values of a column:&lt;/strong&gt;&lt;br&gt;
data.select(&amp;ldquo;column_name&amp;rdquo;).distinct().show()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Parsing a column to create additional columns:&lt;/strong&gt;&lt;br&gt;
from pyspark.sql.functions import split&lt;br&gt;
tweet_created_at is in the format: &amp;ldquo;Tue Nov 01 02:39:55 +0000 2016&amp;rdquo;&lt;br&gt;
a = split(dat_filtered[&amp;ldquo;tweet_created_at&amp;rdquo;], &#39; &amp;lsquo;)&lt;br&gt;
dat_filtered = dat_filtered.withColumn(&amp;lsquo;Month&amp;rsquo;, a.getItem(1))&lt;br&gt;
dat_filtered = dat_filtered1.withColumn(&amp;lsquo;Date&amp;rsquo;, a.getItem(2))&lt;br&gt;
dat_filtered = dat_filtered1.withColumn(&amp;lsquo;Year&amp;rsquo;, a.getItem(5))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Concatenating multiple columns to form a new one&lt;/strong&gt;&lt;br&gt;
dat_filtered.select(concat(col(&amp;ldquo;Month&amp;rdquo;), lit(&amp;rdquo; &amp;ldquo;), col(&amp;ldquo;Date&amp;rdquo;),lit(&amp;rdquo; &amp;ldquo;), col(&amp;ldquo;Year&amp;rdquo;)).alias(&amp;ldquo;Date&amp;rdquo;))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Importing SQL funtions col,lit&lt;/strong&gt;&lt;br&gt;
import pyspark.sql.functions as sq 
dat_filtered.withColumn(&amp;ldquo;tweet_created_at&amp;rdquo;,sq.concat(col(&amp;ldquo;Month&amp;rdquo;), sq.lit(&amp;rdquo; &amp;ldquo;), sq.col(&amp;ldquo;Date&amp;rdquo;),sq.lit(&amp;rdquo; &amp;ldquo;), sq.col(&amp;ldquo;Year&amp;rdquo;)))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Aggregations on dataframe&lt;/strong&gt;&lt;br&gt;
df.groupby(df.date).agg(sq.count(&amp;lsquo;id_str&amp;rsquo;).alias(&amp;ldquo;count_of_tweets&amp;rdquo;))&lt;br&gt;
Above command counts the number of tweets grouped by the date&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. Initializing spark context and sql context to perform SQL queries&lt;/strong&gt;&lt;br&gt;
conf = pyspark.SparkConf()&lt;br&gt;
sc = pyspark.SparkContext.getOrCreate(conf=conf)&lt;br&gt;
from pyspark.sql import SQLContext&lt;br&gt;
sqlcontext = SQLContext(sc)&lt;br&gt;
counts.registerTempTable(&amp;ldquo;tmpcounts&amp;rdquo;)&lt;br&gt;
counts_ordered = sqlcontext.sql(&amp;ldquo;SELECT * FROM tmpcounts order by count_of_tweets desc limit 5&amp;rdquo;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sentiment Analysis on Tweets</title>
      <link>https://vipanchikatthula.github.io/project/twitter-sentiment-analysis/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://vipanchikatthula.github.io/project/twitter-sentiment-analysis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Jaccard Cosine Similarity</title>
      <link>https://vipanchikatthula.github.io/project/jaccard-cosine-similarity/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://vipanchikatthula.github.io/project/jaccard-cosine-similarity/</guid>
      <description>&lt;h1 id=&#34;text-analytics---jaccard-and-cosine-similarity&#34;&gt;Text Analytics - Jaccard and Cosine Similarity&lt;/h1&gt;
&lt;p&gt;Repository to showcase projects related to text analytics and Natural Language Processing (NLP)&lt;/p&gt;
&lt;p&gt;Jaccard Similarity:
The Jaccard similarity index (sometimes called the Jaccard similarity coefficient) compares members for two sets to see which members are shared and which are distinct. It’s a measure of similarity for the two sets of data, with a range from 0% to 100%. The higher the percentage, the more similar the two populations.&lt;/p&gt;
&lt;p&gt;#How to calculate:
The formula to find the Index is:&lt;/p&gt;
&lt;p&gt;Jaccard Index = (the number in both sets) / (the number in either set) * 100&lt;/p&gt;
&lt;p&gt;The same formula in notation is:
J(X,Y) = |X∩Y| / |X∪Y|
In Steps, that’s:&lt;/p&gt;
&lt;p&gt;1.Count the number of members which are shared between both sets.
2.Count the total number of members in both sets (shared and un-shared).
3.Divide the number of shared members (1) by the total number of members (2).
4.Multiply the number you found in (3) by 100.&lt;/p&gt;
&lt;p&gt;Cosine Similarity:
Cosine similarity measures the similarity between two vectors of an inner product space. It is measured by the cosine of the angle between two vectors and determines whether two vectors are pointing in roughly the same direction. Any document can be represented by thousands of attributes, each recording the frequency of a particular word (such as a keyword) or phrase in the document. Thus, each document is an object represented by what is called a term-frequency vector.&lt;/p&gt;
&lt;p&gt;I used python function to calculate the text similarity rather than using the traditional way of calculating by using the formula.&lt;/p&gt;
&lt;p&gt;Sources:
&lt;a href=&#34;https://www.statisticshowto.datasciencecentral.com/jaccard-index/&#34;&gt;https://www.statisticshowto.datasciencecentral.com/jaccard-index/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sciencedirect.com/topics/computer-science/cosine-similarity&#34;&gt;https://www.sciencedirect.com/topics/computer-science/cosine-similarity&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>https://vipanchikatthula.github.io/post/technical-post/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://vipanchikatthula.github.io/post/technical-post/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
